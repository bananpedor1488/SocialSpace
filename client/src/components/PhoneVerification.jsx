import React, { useState, useEffect } from 'react';
import { Phone, CheckCircle, AlertCircle, Copy, ExternalLink } from 'lucide-react';
import './PhoneVerification.css';

const PhoneVerification = ({ onClose }) => {
  const [verificationStatus, setVerificationStatus] = useState(null);
  const [instructions, setInstructions] = useState(null);
  const [verificationCode, setVerificationCode] = useState('');
  const [isLoading, setIsLoading] = useState(true);
  const [isVerifying, setIsVerifying] = useState(false);
  const [message, setMessage] = useState('');
  const [messageType, setMessageType] = useState('');

  useEffect(() => {
    checkVerificationStatus();
  }, []);

  const checkVerificationStatus = async () => {
    try {
      setIsLoading(true);
      const token = localStorage.getItem('token');
      
      const response = await fetch('/api/phone-verification/status', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      const data = await response.json();
      
      if (data.success) {
        setVerificationStatus(data);
        
        // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        if (!data.phoneVerified) {
          await getInstructions();
        }
      } else {
        setMessage(data.message);
        setMessageType('error');
      }
    } catch (error) {
      console.error('Error checking verification status:', error);
      setMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
      setMessageType('error');
    } finally {
      setIsLoading(false);
    }
  };

  const getInstructions = async () => {
    try {
      const token = localStorage.getItem('token');
      
      const response = await fetch('/api/phone-verification/instructions', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      const data = await response.json();
      
      if (data.success) {
        setInstructions(data);
      }
    } catch (error) {
      console.error('Error getting instructions:', error);
    }
  };

  const handleVerifyCode = async (e) => {
    e.preventDefault();
    
    if (!verificationCode.trim()) {
      setMessage('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
      setMessageType('error');
      return;
    }

    try {
      setIsVerifying(true);
      setMessage('');
      
      const token = localStorage.getItem('token');
      
      const response = await fetch('/api/phone-verification/verify', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ code: verificationCode })
      });
      
      const data = await response.json();
      
      if (data.success) {
        setMessage(data.message);
        setMessageType('success');
        setVerificationCode('');
        await checkVerificationStatus(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      } else {
        setMessage(data.message);
        setMessageType('error');
      }
    } catch (error) {
      console.error('Error verifying code:', error);
      setMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞');
      setMessageType('error');
    } finally {
      setIsVerifying(false);
    }
  };

  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text);
    setMessage('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
    setMessageType('success');
    setTimeout(() => setMessage(''), 3000);
  };

  const openTelegramBot = async () => {
    try {
      const token = localStorage.getItem('token');
      
      // –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const response = await fetch('/api/phone-verification/start-auto-verification', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        }
      });
      
      const data = await response.json();
      
      if (data.success) {
        setMessage('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞! –û—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –≤ Telegram.');
        setMessageType('success');
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–æ—Ç–∞ –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
        window.open('https://t.me/SocialSpaceWEB_bot', '_blank');
        
        // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        const checkInterval = setInterval(async () => {
          await checkVerificationStatus();
          if (verificationStatus?.phoneVerified) {
            clearInterval(checkInterval);
            setMessage('üéâ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!');
            setMessageType('success');
          }
        }, 5000);
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
        setTimeout(() => {
          clearInterval(checkInterval);
        }, 120000);
        
      } else {
        setMessage(data.message);
        setMessageType('error');
      }
    } catch (error) {
      console.error('Error starting auto-verification:', error);
      setMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
      setMessageType('error');
    }
  };

  if (isLoading) {
    return (
      <div className="phone-verification">
        <div className="phone-verification-loading">
          <div className="loading-spinner"></div>
          <p>–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...</p>
        </div>
      </div>
    );
  }

    return (
    <div className="phone-verification-overlay">
      <div className="phone-verification">
        <div className="phone-verification-header">
          <div className="header-content">
            <Phone size={24} />
            <h2>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞</h2>
          </div>
          <button className="close-btn" onClick={onClose}>
            ‚úï
          </button>
        </div>
        
        <div className="phone-verification-content">

      {message && (
        <div className={`message ${messageType}`}>
          {messageType === 'success' ? <CheckCircle size={16} /> : <AlertCircle size={16} />}
          <span>{message}</span>
        </div>
      )}

      {verificationStatus?.phoneVerified ? (
        <div className="verification-success">
          <div className="success-icon">
            <CheckCircle size={48} />
          </div>
          <h3>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!</h3>
          <p className="phone-number">+{verificationStatus.phoneNumber}</p>
          <p className="verification-date">
            –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {new Date(verificationStatus.phoneVerifiedAt).toLocaleDateString('ru-RU')}
          </p>
          <div className="success-benefits">
            <h4>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:</h4>
            <ul>
              <li>‚úÖ –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞</li>
              <li>‚úÖ –ë—ã—Å—Ç—Ä–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞</li>
              <li>‚úÖ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã</li>
              <li>‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞</li>
            </ul>
          </div>
        </div>
      ) : (
        <div className="verification-process">
          <div className="verification-info">
            <h3>–ó–∞—á–µ–º –Ω—É–∂–Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è?</h3>
            <p>
              –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–º–æ–≥–∞–µ—Ç –æ–±–µ—Å–ø–µ—á–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ 
              –∏ –∑–∞—â–∏—Ç–∏—Ç—å –µ–≥–æ –æ—Ç –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.
            </p>
          </div>

          {instructions && (
            <div className="verification-steps">
              <h3>–ö–∞–∫ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä:</h3>
              
              <div className="steps-list">
                {instructions.steps.map((step) => (
                  <div key={step.step} className="step-item">
                    <div className="step-number">{step.step}</div>
                    <div className="step-content">
                      <h4>{step.title}</h4>
                      <p>{step.description}</p>
                    </div>
                  </div>
                ))}
              </div>

                             <div className="bot-actions">
                 <button 
                   className="btn btn-primary"
                   onClick={openTelegramBot}
                 >
                   <ExternalLink size={16} />
                   –ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è)
                 </button>
                 
                 <button 
                   className="btn btn-secondary"
                   onClick={() => copyToClipboard('https://t.me/SocialSpaceWEB_bot')}
                 >
                   <Copy size={16} />
                   –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É
                 </button>
               </div>
            </div>
          )}

                     <div className="verification-info">
             <h3>üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è</h3>
             <p>
               –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞" –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ Telegram, 
               –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–∞–π—Ç–µ.
             </p>
             
             <div className="verification-tips">
               <h4>üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</h4>
               <ul>
                 <li>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞"</li>
                 <li>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –≤ Telegram</li>
                 <li>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"</li>
                 <li>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!</li>
                 <li>–í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç - —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–∏—Ç—Å—è</li>
               </ul>
             </div>
           </div>
        </div>
      )}
        </div>
      </div>
    </div>
  );
};

export default PhoneVerification;
