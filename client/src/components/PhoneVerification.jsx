import React, { useState, useEffect, useRef } from 'react';
import { Phone, CheckCircle, AlertCircle, Copy, ExternalLink, Clock, CheckSquare } from 'lucide-react';
import API_CONFIG from '../config/api';
import './PhoneVerification.css';
import { formatDate } from '../utils/timeUtils';

const PhoneVerification = ({ onClose }) => {
  const [verificationStatus, setVerificationStatus] = useState(null);
  const [instructions, setInstructions] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [message, setMessage] = useState('');
  const [messageType, setMessageType] = useState('');
  const [verificationStep, setVerificationStep] = useState('initial'); // initial, started, completed
  const [requestId, setRequestId] = useState(null);
  const [checkCount, setCheckCount] = useState(0);
  const [isChecking, setIsChecking] = useState(false);
  const checkIntervalRef = useRef(null);
  const timeoutRef = useRef(null);

  useEffect(() => {
    checkVerificationStatus();
    return () => {
      if (checkIntervalRef.current) {
        clearInterval(checkIntervalRef.current);
      }
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
    };
  }, []);

  const checkVerificationStatus = async () => {
    try {
      setIsChecking(true);
      const token = localStorage.getItem('accessToken');
      
      console.log('üîç Checking verification status...');
      console.log('Token present:', !!token);
      console.log('Token length:', token ? token.length : 0);
      
      if (!token) {
        console.error('‚ùå No token found in localStorage');
        setMessage('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.');
        setMessageType('error');
        return;
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é API –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ URL
      const apiUrl = process.env.NODE_ENV === 'development' 
        ? API_CONFIG.getRelativeUrl('/api/phone-verification/status')
        : API_CONFIG.getApiUrl('/api/phone-verification/status');
      
      const response = await fetch(apiUrl, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (response.status === 401) {
        setMessage('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.');
        setMessageType('error');
        // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
        localStorage.removeItem('accessToken');
        localStorage.removeItem('refreshToken');
        localStorage.removeItem('user');
        window.location.href = '/auth';
        return;
      }
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      
      if (data.success) {
        setVerificationStatus(data);
        
        // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        if (data.phoneVerified) {
          setVerificationStep('completed');
          if (checkIntervalRef.current) {
            clearInterval(checkIntervalRef.current);
          }
          if (timeoutRef.current) {
            clearTimeout(timeoutRef.current);
          }
          setMessage('üéâ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!');
          setMessageType('success');
        } else if (verificationStep === 'initial') {
          // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∏ –º—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å, –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
          await getInstructions();
        }
      } else {
        setMessage(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞');
        setMessageType('error');
      }
    } catch (error) {
      console.error('Error checking verification status:', error);
      setMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ' + error.message);
      setMessageType('error');
    } finally {
      setIsChecking(false);
    }
  };

  const getInstructions = async () => {
    try {
      const token = localStorage.getItem('accessToken');
      
      if (!token) {
        return;
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é API –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ URL
      const apiUrl = process.env.NODE_ENV === 'development' 
        ? API_CONFIG.getRelativeUrl('/api/phone-verification/instructions')
        : API_CONFIG.getApiUrl('/api/phone-verification/instructions');
      
      const response = await fetch(apiUrl, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (response.status === 401) {
        setMessage('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.');
        setMessageType('error');
        localStorage.removeItem('accessToken');
        localStorage.removeItem('refreshToken');
        localStorage.removeItem('user');
        window.location.href = '/auth';
        return;
      }
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      
      if (data.success) {
        setInstructions(data);
      }
    } catch (error) {
      console.error('Error getting instructions:', error);
    }
  };

  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text);
    setMessage('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
    setMessageType('success');
    setTimeout(() => setMessage(''), 3000);
  };

  const openTelegramBot = async () => {
    try {
      setIsLoading(true);
      const token = localStorage.getItem('accessToken');
      
      console.log('üöÄ Opening Telegram bot...');
      console.log('Token present:', !!token);
      console.log('Token length:', token ? token.length : 0);
      
      if (!token) {
        console.error('‚ùå No token found in localStorage for Telegram bot');
        setMessage('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.');
        setMessageType('error');
        return;
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é API –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ URL
      const apiUrl = process.env.NODE_ENV === 'development' 
        ? API_CONFIG.getRelativeUrl('/api/phone-verification/start-auto-verification')
        : API_CONFIG.getApiUrl('/api/phone-verification/start-auto-verification');
      
      // –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (response.status === 401) {
        setMessage('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.');
        setMessageType('error');
        localStorage.removeItem('accessToken');
        localStorage.removeItem('refreshToken');
        localStorage.removeItem('user');
        window.location.href = '/auth';
        return;
      }
      
      const data = await response.json();
      
      if (data.success) {
        setVerificationStep('started');
        setRequestId(data.chatId);
        setMessage('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞! –û—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –≤ Telegram.');
        setMessageType('success');
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–æ—Ç–∞ –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
        window.open('https://t.me/SocialSpaceWEB_bot', '_blank');
        
        // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
        checkIntervalRef.current = setInterval(async () => {
          setCheckCount(prev => prev + 1);
          await checkVerificationStatus();
        }, 3000);
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
        timeoutRef.current = setTimeout(() => {
          if (checkIntervalRef.current) {
            clearInterval(checkIntervalRef.current);
          }
          setMessage('–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
          setMessageType('error');
        }, 120000);
        
      } else {
        setMessage(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
        setMessageType('error');
      }
    } catch (error) {
      console.error('Error starting auto-verification:', error);
      setMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ' + error.message);
      setMessageType('error');
    } finally {
      setIsLoading(false);
    }
  };

  const renderContent = () => {
    if (verificationStatus?.phoneVerified) {
      return (
        <div className="verification-success">
          <div className="success-animation">
            <div className="success-icon">
              <CheckCircle size={64} />
            </div>
            <div className="success-ripple"></div>
          </div>
          <h3>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!</h3>
          <p className="phone-number">+{verificationStatus.phoneNumber}</p>
          <p className="verification-date">
            –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {formatDate(verificationStatus.phoneVerifiedAt)}
          </p>
          <div className="success-benefits">
            <h4>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:</h4>
            <ul>
              <li>‚úÖ –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞</li>
              <li>‚úÖ –ë—ã—Å—Ç—Ä–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞</li>
              <li>‚úÖ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã</li>
              <li>‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞</li>
            </ul>
          </div>
        </div>
      );
    }

    if (verificationStep === 'started') {
      return (
        <div className="verification-progress">
          <div className="progress-animation">
            <div className="progress-icon">
              <Clock size={48} />
            </div>
            <div className="progress-dots">
              <span></span>
              <span></span>
              <span></span>
            </div>
          </div>
          
          <h3>–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...</h3>
          
          {requestId && (
            <div className="request-info">
              <p className="request-id">
                <strong>–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:</strong> 
                <span className="request-number">{requestId}</span>
              </p>
              <p className="request-instructions">
                –ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä –±–æ—Ç—É –≤ Telegram –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
              </p>
            </div>
          )}
          
          <div className="progress-status">
            <p>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: {checkCount} —Ä–∞–∑</p>
            <div className="progress-bar">
              <div 
                className="progress-fill" 
                style={{ width: `${Math.min((checkCount * 3) / 120 * 100, 100)}%` }}
              ></div>
            </div>
          </div>
          
          <div className="progress-tips">
            <h4>üí° –ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:</h4>
            <ul>
              <li>–û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ @SocialSpaceWEB_bot</li>
              <li>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start</li>
              <li>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"</li>
              <li>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!</li>
            </ul>
          </div>
        </div>
      );
    }

    return (
      <div className="verification-process">
        <div className="verification-info">
          <h3>–ó–∞—á–µ–º –Ω—É–∂–Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è?</h3>
          <p>
            –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–º–æ–≥–∞–µ—Ç –æ–±–µ—Å–ø–µ—á–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ 
            –∏ –∑–∞—â–∏—Ç–∏—Ç—å –µ–≥–æ –æ—Ç –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.
          </p>
        </div>

        {instructions && (
          <div className="verification-steps">
            <h3>–ö–∞–∫ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä:</h3>
            
            <div className="steps-list">
              {instructions.steps.map((step) => (
                <div key={step.step} className="step-item">
                  <div className="step-number">{step.step}</div>
                  <div className="step-content">
                    <h4>{step.title}</h4>
                    <p>{step.description}</p>
                  </div>
                </div>
              ))}
            </div>

            <div className="bot-actions">
              <button 
                className="btn btn-primary"
                onClick={openTelegramBot}
                disabled={isLoading}
              >
                {isLoading ? (
                  <>
                    <div className="btn-spinner"></div>
                    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...
                  </>
                ) : (
                  <>
                    <ExternalLink size={16} />
                    –ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è)
                  </>
                )}
              </button>
              
              <button 
                className="btn btn-secondary"
                onClick={() => copyToClipboard('https://t.me/SocialSpaceWEB_bot')}
              >
                <Copy size={16} />
                –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É
              </button>
            </div>
          </div>
        )}

        <div className="verification-info">
          <h3>üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è</h3>
          <p>
            –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞" –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ Telegram, 
            –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–∞–π—Ç–µ.
          </p>
          
          <div className="verification-tips">
            <h4>üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</h4>
            <ul>
              <li>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞"</li>
              <li>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –≤ Telegram</li>
              <li>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"</li>
              <li>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!</li>
              <li>–í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç - —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–∏—Ç—Å—è</li>
            </ul>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="phone-verification-overlay">
      <div className="phone-verification">
        <div className="phone-verification-header">
          <div className="header-content">
            <Phone size={24} />
            <h2>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞</h2>
          </div>
          <button className="close-btn" onClick={onClose}>
            ‚úï
          </button>
        </div>
        
        <div className="phone-verification-content">
          {message && (
            <div className={`message ${messageType}`}>
              {messageType === 'success' ? <CheckCircle size={16} /> : <AlertCircle size={16} />}
              <span>{message}</span>
            </div>
          )}

          {renderContent()}
        </div>
      </div>
    </div>
  );
};

export default PhoneVerification;
